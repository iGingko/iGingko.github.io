---
layout: post
title: "ReactiveCocoa系列(一)--基本概念"
date: 2015-10-27 15:52:51 +0800
comments: true
categories: 
---

### 1.ReactiveCocoa简介

>ReactiveCocoa是由Github开源的一个应用于iOS和OS X的开发的新框架，其具有函数式编程和响应式编程的特性。RAC是FRP(**函数响应式编程(Functional Reactive Programming)**)

FRP的核心是信号，信号在ReactiveCocoa中是通过RACSingle来表示的，信号是数据流，可以被绑定和传递。也可以通过一个例子来介绍一下

	在命令式编程环境中，a = b + c 表示将表达式的结果赋给a，而之后改变b或c的值不会影响a。
	但在响应式编程中，a的值会随着b或c的更新而更新。
	
	Excel就是响应式编程的一个例子。单元格可以包含字面值或类似”=B1+C1″的公式，
	而包含公式的单元格的值会依据其他单元格的值的变化而变化 。
	
### 2.为什么使用ReactiveCocoa
- 为了解决传统iOS开发中，状态以及状态之间依赖过多的问题
- 传统MVC架构中Controller比较复杂，可测试性差，而RAC可以更好地践行MVVM设计模式，让各个层之间的值通过信号进行流式传递。这样可以更有效地进行以测试为驱动的开发，并更好地进行单元测试。
- 提供统一的消息传递机制，统一了KVO、UI Event、Network Request、Async Work的处理，他们本质上都是值的变化
- 利用RAC处理问题可以把处理的事情和监听事情的代码放在一起，这样非常符合我们开发中`高聚合，第耦合`的思想

### 3.编程思想

-  `面向过程`:处理事情以过程为核心，一步步地实现
-  `面向对象`:万物皆对象。面向对象是对人类基于自然语言的知识组织方式的简化模拟
-  `链式编程思想`是将多个操作（多行代码）通过点号(.)链接在一起成为一句代码,使代码可读性好。a(1).b(2).c(3)。方法的返回值是block,block必须有返回值（本身对象），block参数（需要操作的值）。例如:Masonry
-  `响应式编程思想`：不需要考虑调用顺序，只需要知道考虑结果，类似于蝴蝶效应，产生一个事件，会影响很多东西，这些事件像流一样的传播出去，然后影响结果，借用面向对象的一句话，万物皆是流。
-  `函数式编程思想`：是把操作尽量写成一系列嵌套的函数或者方法调用。每个方法必须有返回值（本身对象）,把函数或者Block当做参数,block参数（需要操作的值）block返回值（操作结果）

结合对这几种编程思想的了解，我们得知，ReactiveiCocoa是结合了响应式编程和函数式编程的思想。以后使用RAC解决问题，就不需要考虑调用顺序，直接考虑结果，把每一次操作都写成一系列嵌套的方法中，使代码高聚合，方便管理。

### 4.我理解的RAC
有些非常优秀的同行来这样比喻
>可以把信号想象成水龙头，只不过里面不是水，而是玻璃球(value)，直径跟水管的内径一样，这样就能保证玻璃球是依次排列，不会出现并排的情况(数据都是线性处理的，不会出现并发情况)。水龙头的开关默认是关的，除非有了接收方(subscriber)，才会打开。这样只要有新的玻璃球进来，就会自动传送给接收方。可以在水龙头上加一个过滤嘴(filter)，不符合的不让通过，也可以加一个改动装置，把球改变成符合自己的需求(map)。也可以把多个水龙头合并成一个新的水龙头(combineLatest:reduce:)，这样只要其中的一个水龙头有玻璃球出来，这个新合并的水龙头就会得到这个球

当然我也有自己的理解，不过最基本的道理都是一样的
>让View和Model之间建立一条通道，可以把View想象成电视，Model想象成电视台，在电视和电视台之间搭建一条信号通道，在通道中可以对信号进行各种操作，可以过滤(filter)、可以改动(map)、也可以把其他电视台的信号接进来形成新的信号(combineLatest:reduce:)

### 5.MVVM

FRP倾向于技术理论上的方法论，RAC是FRP的践行者。MVVM则是程序模式的方法论。就好比FRP是制作屠龙宝刀的秘籍，而RAC就是屠龙宝刀。MVVM就是如何屠龙的方法论。