---
layout: post
title: "Git学习笔记"
date: 2014-11-21 11:16:22 +0800
comments: true
categories:
---

> 用了Git才知道什么才是真正的版本管理，跟之前的SVN相比，要甩开它几条街，现将最近学习的一些心得分享给大家。

### 学习资源整理


  1.  [Pro Git的中文站点](http://git-scm.com/book/zh)
  2. [廖雪峰的Git教程](http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000?from=singlemessage&isappinstalled=0)
  3. [GIt简明指南](http://rogerdudler.github.io/git-guide/index.zh.html)

### Git简介


  1. Git是世界上最先进的分布式版本控制系统(没有之一)
  2. Git是Linux的创始人Linus于2005年花两周时间用C写的一个分布式版本管理系统
  3. Linus自己写Git的缘由是BitMover发现有些Linux社区的牛人试图破解BitKeeper的协议，于是收回了Linux社区的免费使用权
  4. 2008年Github上线，更是让Git成为最流行的分布式版本控制系统



### 集中式VS分布式


  1. 集中式版本管理系统（eg:SVN、CVS）版本库是集中放在中央服务器的，必须联网才能工作
  2. 分布式版本管理系统，没有中央服务器的概念，每个电脑上都是一个完整的版本库
  3. 分布式要比集中式安全很多，因为每个人的电脑上都有一个完整的版本库。一般也会有一个服务器，但仅仅是为了方便大家来交换修改
  4. 分布式强大的分支功能，要拉集中式几条街

### GIt基本操作


  1. 创建版本库  git init
  2. 查看状态  git  status
  3. 添加到暂存区  git add filename    添加所有修改 git add -A 或者 git add .
  4. 提交文件到仓库  git commit  -m  ‘ Commit’  或者  git commit -a -m ‘ ‘(这样就可以省略git add步骤)
  5. 查看对文件做了哪些修改  git diff FileName
  6. 查看历史记录  git  log   可以加参数  git log —pretty=oneline
  7. 版本回退  HEAD表示当前版本，也就是最新的提交  上一个版本是HEAD^,上上个版本是HEAD^^,往上100个版本是HEAD~100
  8. 版本回退到上几个版本   git reset - - hard HEAD^  也可以根据版本号 进行回退 git reset —3628164
  9. 如果退回之前的版本又后悔了，想退回原来最新的版本怎么办，可以通过git  relog 找到之前最新的版本号
  10. 撤销修改  git checkout - - fileName   如果已经add到暂存区，那么需要 git reset HEAD fileName
  11. 删除文件  rm fileName 删除工作区文件  git rm filename git commit  如果只是从工作区删除 那么可以用 git checkout - - filename
  12. 把本地GIt仓库推送到服务器上 git remote add origin git@github.com:xxx/xxx.git  git push -u origin master  “-u”参数不但会把本地的master分支内容推送到远程新的master分支，还会把本地的masterfe分支和远程的master分支关联起来
  13. git push origin branch Name 推送分支

### Git 分支


  1. 查看本地分支  git branch -l
  2. 查看服务器分支  git branch -r
  3. git  checkout -b branchName 相当于git branch branchName  和 git checkout branchName 新建一个分支 然后checkout
  4. git  checkout -b branchName origin/branchName  是把服务器上的相应分支拉到本地œ
  5. 合并分支  git merge brName 把brName分支合并到当前分支
  6. 删除分支  git  branch -d brNa  如果删除不了就把小d改成大D
  7. 查看分支的合并情况  git  log  - - graph - -pretty=oneline  - - abbrev-commit
  8. 通常，合并分支时，如果可能，Git会用“Fase Forward”模式，但这种模式下，删除分支后，会丢掉分支信息。如果要强制禁用“Fase forward”模式，git就会在merge时生成一个新的commit,这样，从分支历史上就可以看出分支信息  git  merge   - - no-ff -m ‘ merge with mo-ff’
  9. 分支策略  首先master分支是非常稳定的，也就是仅仅用来发布新版本，平时不能在上面干货。要在dev分支上干货 每个人都有自己的分支，只要时不时的往dev分支上合并就行了
  10. ![Alt text](/images/posts/br.png)

  11. Bug分支  当临时要去修改其它分支Bug,而当前所在分支还没有提交也不想提交时，有以下方法：1、比较高大上的 先执行git  stash 把当前分支的修改临时存储起来，修复完Bug之后再回来  git stash lish 产看stash目录  可以用git stash pop 直接恢复，而且会删除stash命令 。如果用git stash apply 就必须自行执行 git stash drop .  多次stash的话 可以用 git stash apple stash@{0}
  12. 开发一个feature最好是新建一个分支，如果要丢弃一个没有被合并过的分支，可以通过git branch -D name强行删除
  13. git push origin —delete 删除远程分支

### 解决冲突

 如果git push的时候和服务器发生冲突，那么


  1. git pull 把remote上的代码拉下来
  2. 手动解决冲突
  3. git add .
  4. git rebase - -continue
  5. git push origin branchName


### Git版本库

![Alt text](/images/posts/GitVerLib.jpeg)



###Git的优势


  1. Git不需联网就能工作
  2. Git比较安全，每个电脑上都是一个完整的版本库
  3. Git有强大的分支功能
  4. Git跟踪的时修改，问不是文件。比如对一个文件修改了两次，那么就会跟踪两次

### Git工具

1. Tower  强力推荐
2. Github官方工具
3. SourceTree
